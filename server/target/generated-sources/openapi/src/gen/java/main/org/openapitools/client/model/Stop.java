/*
 * GTFS Transit API
 * A sample REST API for accessing public transit data from a GTFS feed. This API allows users to query for agencies, routes, stops, and schedule information.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@transit-example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A transit stop or station from the &#x60;stops.txt&#x60; GTFS file.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-30T12:08:48.652081200+02:00[Europe/Skopje]", comments = "Generator version: 7.14.0")
public class Stop {
  public static final String SERIALIZED_NAME_STOP_ID = "stop_id";
  @SerializedName(SERIALIZED_NAME_STOP_ID)
  @jakarta.annotation.Nullable
  private String stopId;

  public static final String SERIALIZED_NAME_STOP_NAME = "stop_name";
  @SerializedName(SERIALIZED_NAME_STOP_NAME)
  @jakarta.annotation.Nullable
  private String stopName;

  public static final String SERIALIZED_NAME_STOP_LAT = "stop_lat";
  @SerializedName(SERIALIZED_NAME_STOP_LAT)
  @jakarta.annotation.Nullable
  private Double stopLat;

  public static final String SERIALIZED_NAME_STOP_LON = "stop_lon";
  @SerializedName(SERIALIZED_NAME_STOP_LON)
  @jakarta.annotation.Nullable
  private Double stopLon;

  public static final String SERIALIZED_NAME_WHEELCHAIR_BOARDING = "wheelchair_boarding";
  @SerializedName(SERIALIZED_NAME_WHEELCHAIR_BOARDING)
  @jakarta.annotation.Nullable
  private Integer wheelchairBoarding;

  public Stop() {
  }

  public Stop stopId(@jakarta.annotation.Nullable String stopId) {
    this.stopId = stopId;
    return this;
  }

  /**
   * Unique identifier for the stop.
   * @return stopId
   */
  @jakarta.annotation.Nullable
  public String getStopId() {
    return stopId;
  }

  public void setStopId(@jakarta.annotation.Nullable String stopId) {
    this.stopId = stopId;
  }


  public Stop stopName(@jakarta.annotation.Nullable String stopName) {
    this.stopName = stopName;
    return this;
  }

  /**
   * The name of the stop.
   * @return stopName
   */
  @jakarta.annotation.Nullable
  public String getStopName() {
    return stopName;
  }

  public void setStopName(@jakarta.annotation.Nullable String stopName) {
    this.stopName = stopName;
  }


  public Stop stopLat(@jakarta.annotation.Nullable Double stopLat) {
    this.stopLat = stopLat;
    return this;
  }

  /**
   * The latitude of the stop.
   * @return stopLat
   */
  @jakarta.annotation.Nullable
  public Double getStopLat() {
    return stopLat;
  }

  public void setStopLat(@jakarta.annotation.Nullable Double stopLat) {
    this.stopLat = stopLat;
  }


  public Stop stopLon(@jakarta.annotation.Nullable Double stopLon) {
    this.stopLon = stopLon;
    return this;
  }

  /**
   * The longitude of the stop.
   * @return stopLon
   */
  @jakarta.annotation.Nullable
  public Double getStopLon() {
    return stopLon;
  }

  public void setStopLon(@jakarta.annotation.Nullable Double stopLon) {
    this.stopLon = stopLon;
  }


  public Stop wheelchairBoarding(@jakarta.annotation.Nullable Integer wheelchairBoarding) {
    this.wheelchairBoarding = wheelchairBoarding;
    return this;
  }

  /**
   * Information on wheelchair accessibility. &#x60;1&#x60; for some level of accessibility, &#x60;2&#x60; for no accessibility.
   * @return wheelchairBoarding
   */
  @jakarta.annotation.Nullable
  public Integer getWheelchairBoarding() {
    return wheelchairBoarding;
  }

  public void setWheelchairBoarding(@jakarta.annotation.Nullable Integer wheelchairBoarding) {
    this.wheelchairBoarding = wheelchairBoarding;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Stop stop = (Stop) o;
    return Objects.equals(this.stopId, stop.stopId) &&
        Objects.equals(this.stopName, stop.stopName) &&
        Objects.equals(this.stopLat, stop.stopLat) &&
        Objects.equals(this.stopLon, stop.stopLon) &&
        Objects.equals(this.wheelchairBoarding, stop.wheelchairBoarding);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stopId, stopName, stopLat, stopLon, wheelchairBoarding);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Stop {\n");
    sb.append("    stopId: ").append(toIndentedString(stopId)).append("\n");
    sb.append("    stopName: ").append(toIndentedString(stopName)).append("\n");
    sb.append("    stopLat: ").append(toIndentedString(stopLat)).append("\n");
    sb.append("    stopLon: ").append(toIndentedString(stopLon)).append("\n");
    sb.append("    wheelchairBoarding: ").append(toIndentedString(wheelchairBoarding)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("stop_id", "stop_name", "stop_lat", "stop_lon", "wheelchair_boarding"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Stop
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Stop.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Stop is not found in the empty JSON string", Stop.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Stop.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Stop` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("stop_id") != null && !jsonObj.get("stop_id").isJsonNull()) && !jsonObj.get("stop_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stop_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stop_id").toString()));
      }
      if ((jsonObj.get("stop_name") != null && !jsonObj.get("stop_name").isJsonNull()) && !jsonObj.get("stop_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stop_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stop_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Stop.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Stop' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Stop> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Stop.class));

       return (TypeAdapter<T>) new TypeAdapter<Stop>() {
           @Override
           public void write(JsonWriter out, Stop value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Stop read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Stop given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Stop
   * @throws IOException if the JSON string is invalid with respect to Stop
   */
  public static Stop fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Stop.class);
  }

  /**
   * Convert an instance of Stop to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

