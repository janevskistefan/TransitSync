/*
 * GTFS Transit API
 * A sample REST API for accessing public transit data from a GTFS feed. This API allows users to query for agencies, routes, stops, and schedule information.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@transit-example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.Stop;
import org.openapitools.client.model.StopDeparture;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StopsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StopsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StopsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getStopDepartures
     * @param stopId The unique ID of the stop. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of upcoming scheduled departures. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Stop not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStopDeparturesCall(@jakarta.annotation.Nonnull String stopId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stops/{stopId}/departures"
            .replace("{" + "stopId" + "}", localVarApiClient.escapeString(stopId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStopDeparturesValidateBeforeCall(@jakarta.annotation.Nonnull String stopId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stopId' is set
        if (stopId == null) {
            throw new ApiException("Missing the required parameter 'stopId' when calling getStopDepartures(Async)");
        }

        return getStopDeparturesCall(stopId, _callback);

    }

    /**
     * Get upcoming departures for a stop
     * Returns a list of upcoming departures for a specific stop, including route and trip information.
     * @param stopId The unique ID of the stop. (required)
     * @return List&lt;StopDeparture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of upcoming scheduled departures. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Stop not found. </td><td>  -  </td></tr>
     </table>
     */
    public List<StopDeparture> getStopDepartures(@jakarta.annotation.Nonnull String stopId) throws ApiException {
        ApiResponse<List<StopDeparture>> localVarResp = getStopDeparturesWithHttpInfo(stopId);
        return localVarResp.getData();
    }

    /**
     * Get upcoming departures for a stop
     * Returns a list of upcoming departures for a specific stop, including route and trip information.
     * @param stopId The unique ID of the stop. (required)
     * @return ApiResponse&lt;List&lt;StopDeparture&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of upcoming scheduled departures. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Stop not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<StopDeparture>> getStopDeparturesWithHttpInfo(@jakarta.annotation.Nonnull String stopId) throws ApiException {
        okhttp3.Call localVarCall = getStopDeparturesValidateBeforeCall(stopId, null);
        Type localVarReturnType = new TypeToken<List<StopDeparture>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get upcoming departures for a stop (asynchronously)
     * Returns a list of upcoming departures for a specific stop, including route and trip information.
     * @param stopId The unique ID of the stop. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of upcoming scheduled departures. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Stop not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStopDeparturesAsync(@jakarta.annotation.Nonnull String stopId, final ApiCallback<List<StopDeparture>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStopDeparturesValidateBeforeCall(stopId, _callback);
        Type localVarReturnType = new TypeToken<List<StopDeparture>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStops
     * @param lat Latitude of the search center. (required)
     * @param lon Longitude of the search center. (required)
     * @param radius Search radius in meters. (optional, default to 500)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of nearby stops. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid coordinates provided. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStopsCall(@jakarta.annotation.Nonnull Double lat, @jakarta.annotation.Nonnull Double lon, @jakarta.annotation.Nullable Integer radius, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stops";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStopsValidateBeforeCall(@jakarta.annotation.Nonnull Double lat, @jakarta.annotation.Nonnull Double lon, @jakarta.annotation.Nullable Integer radius, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getStops(Async)");
        }

        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getStops(Async)");
        }

        return getStopsCall(lat, lon, radius, _callback);

    }

    /**
     * Find transit stops near a location
     * Returns a list of stops within a specified radius of a geographic point.
     * @param lat Latitude of the search center. (required)
     * @param lon Longitude of the search center. (required)
     * @param radius Search radius in meters. (optional, default to 500)
     * @return List&lt;Stop&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of nearby stops. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid coordinates provided. </td><td>  -  </td></tr>
     </table>
     */
    public List<Stop> getStops(@jakarta.annotation.Nonnull Double lat, @jakarta.annotation.Nonnull Double lon, @jakarta.annotation.Nullable Integer radius) throws ApiException {
        ApiResponse<List<Stop>> localVarResp = getStopsWithHttpInfo(lat, lon, radius);
        return localVarResp.getData();
    }

    /**
     * Find transit stops near a location
     * Returns a list of stops within a specified radius of a geographic point.
     * @param lat Latitude of the search center. (required)
     * @param lon Longitude of the search center. (required)
     * @param radius Search radius in meters. (optional, default to 500)
     * @return ApiResponse&lt;List&lt;Stop&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of nearby stops. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid coordinates provided. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Stop>> getStopsWithHttpInfo(@jakarta.annotation.Nonnull Double lat, @jakarta.annotation.Nonnull Double lon, @jakarta.annotation.Nullable Integer radius) throws ApiException {
        okhttp3.Call localVarCall = getStopsValidateBeforeCall(lat, lon, radius, null);
        Type localVarReturnType = new TypeToken<List<Stop>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find transit stops near a location (asynchronously)
     * Returns a list of stops within a specified radius of a geographic point.
     * @param lat Latitude of the search center. (required)
     * @param lon Longitude of the search center. (required)
     * @param radius Search radius in meters. (optional, default to 500)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of nearby stops. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid coordinates provided. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStopsAsync(@jakarta.annotation.Nonnull Double lat, @jakarta.annotation.Nonnull Double lon, @jakarta.annotation.Nullable Integer radius, final ApiCallback<List<Stop>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStopsValidateBeforeCall(lat, lon, radius, _callback);
        Type localVarReturnType = new TypeToken<List<Stop>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
