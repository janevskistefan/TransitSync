/*
 * GTFS Transit API
 * A sample REST API for accessing public transit data from a GTFS feed. This API allows users to query for agencies, routes, stops, and schedule information.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@transit-example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A transit route from the &#x60;routes.txt&#x60; GTFS file.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-30T12:08:48.652081200+02:00[Europe/Skopje]", comments = "Generator version: 7.14.0")
public class Route {
  public static final String SERIALIZED_NAME_ROUTE_ID = "route_id";
  @SerializedName(SERIALIZED_NAME_ROUTE_ID)
  @jakarta.annotation.Nullable
  private String routeId;

  public static final String SERIALIZED_NAME_AGENCY_ID = "agency_id";
  @SerializedName(SERIALIZED_NAME_AGENCY_ID)
  @jakarta.annotation.Nullable
  private String agencyId;

  public static final String SERIALIZED_NAME_ROUTE_SHORT_NAME = "route_short_name";
  @SerializedName(SERIALIZED_NAME_ROUTE_SHORT_NAME)
  @jakarta.annotation.Nullable
  private String routeShortName;

  public static final String SERIALIZED_NAME_ROUTE_LONG_NAME = "route_long_name";
  @SerializedName(SERIALIZED_NAME_ROUTE_LONG_NAME)
  @jakarta.annotation.Nullable
  private String routeLongName;

  public static final String SERIALIZED_NAME_ROUTE_TYPE = "route_type";
  @SerializedName(SERIALIZED_NAME_ROUTE_TYPE)
  @jakarta.annotation.Nullable
  private Integer routeType;

  public static final String SERIALIZED_NAME_ROUTE_COLOR = "route_color";
  @SerializedName(SERIALIZED_NAME_ROUTE_COLOR)
  @jakarta.annotation.Nullable
  private String routeColor;

  public Route() {
  }

  public Route routeId(@jakarta.annotation.Nullable String routeId) {
    this.routeId = routeId;
    return this;
  }

  /**
   * A unique identifier for the route.
   * @return routeId
   */
  @jakarta.annotation.Nullable
  public String getRouteId() {
    return routeId;
  }

  public void setRouteId(@jakarta.annotation.Nullable String routeId) {
    this.routeId = routeId;
  }


  public Route agencyId(@jakarta.annotation.Nullable String agencyId) {
    this.agencyId = agencyId;
    return this;
  }

  /**
   * ID of the agency that operates this route.
   * @return agencyId
   */
  @jakarta.annotation.Nullable
  public String getAgencyId() {
    return agencyId;
  }

  public void setAgencyId(@jakarta.annotation.Nullable String agencyId) {
    this.agencyId = agencyId;
  }


  public Route routeShortName(@jakarta.annotation.Nullable String routeShortName) {
    this.routeShortName = routeShortName;
    return this;
  }

  /**
   * A short name for the route, often a number or letter.
   * @return routeShortName
   */
  @jakarta.annotation.Nullable
  public String getRouteShortName() {
    return routeShortName;
  }

  public void setRouteShortName(@jakarta.annotation.Nullable String routeShortName) {
    this.routeShortName = routeShortName;
  }


  public Route routeLongName(@jakarta.annotation.Nullable String routeLongName) {
    this.routeLongName = routeLongName;
    return this;
  }

  /**
   * The full, descriptive name of the route.
   * @return routeLongName
   */
  @jakarta.annotation.Nullable
  public String getRouteLongName() {
    return routeLongName;
  }

  public void setRouteLongName(@jakarta.annotation.Nullable String routeLongName) {
    this.routeLongName = routeLongName;
  }


  public Route routeType(@jakarta.annotation.Nullable Integer routeType) {
    this.routeType = routeType;
    return this;
  }

  /**
   * The type of transportation used on this route. * &#x60;0&#x60; - Tram, Streetcar, Light rail * &#x60;1&#x60; - Subway, Metro * &#x60;2&#x60; - Rail * &#x60;3&#x60; - Bus * &#x60;4&#x60; - Ferry * &#x60;5&#x60; - Cable tram * &#x60;6&#x60; - Aerial lift * &#x60;7&#x60; - Funicular
   * @return routeType
   */
  @jakarta.annotation.Nullable
  public Integer getRouteType() {
    return routeType;
  }

  public void setRouteType(@jakarta.annotation.Nullable Integer routeType) {
    this.routeType = routeType;
  }


  public Route routeColor(@jakarta.annotation.Nullable String routeColor) {
    this.routeColor = routeColor;
    return this;
  }

  /**
   * The color associated with the route, in hex format.
   * @return routeColor
   */
  @jakarta.annotation.Nullable
  public String getRouteColor() {
    return routeColor;
  }

  public void setRouteColor(@jakarta.annotation.Nullable String routeColor) {
    this.routeColor = routeColor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Route route = (Route) o;
    return Objects.equals(this.routeId, route.routeId) &&
        Objects.equals(this.agencyId, route.agencyId) &&
        Objects.equals(this.routeShortName, route.routeShortName) &&
        Objects.equals(this.routeLongName, route.routeLongName) &&
        Objects.equals(this.routeType, route.routeType) &&
        Objects.equals(this.routeColor, route.routeColor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(routeId, agencyId, routeShortName, routeLongName, routeType, routeColor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Route {\n");
    sb.append("    routeId: ").append(toIndentedString(routeId)).append("\n");
    sb.append("    agencyId: ").append(toIndentedString(agencyId)).append("\n");
    sb.append("    routeShortName: ").append(toIndentedString(routeShortName)).append("\n");
    sb.append("    routeLongName: ").append(toIndentedString(routeLongName)).append("\n");
    sb.append("    routeType: ").append(toIndentedString(routeType)).append("\n");
    sb.append("    routeColor: ").append(toIndentedString(routeColor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("route_id", "agency_id", "route_short_name", "route_long_name", "route_type", "route_color"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Route
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Route.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Route is not found in the empty JSON string", Route.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Route.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Route` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("route_id") != null && !jsonObj.get("route_id").isJsonNull()) && !jsonObj.get("route_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `route_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("route_id").toString()));
      }
      if ((jsonObj.get("agency_id") != null && !jsonObj.get("agency_id").isJsonNull()) && !jsonObj.get("agency_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agency_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agency_id").toString()));
      }
      if ((jsonObj.get("route_short_name") != null && !jsonObj.get("route_short_name").isJsonNull()) && !jsonObj.get("route_short_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `route_short_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("route_short_name").toString()));
      }
      if ((jsonObj.get("route_long_name") != null && !jsonObj.get("route_long_name").isJsonNull()) && !jsonObj.get("route_long_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `route_long_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("route_long_name").toString()));
      }
      if ((jsonObj.get("route_color") != null && !jsonObj.get("route_color").isJsonNull()) && !jsonObj.get("route_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `route_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("route_color").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Route.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Route' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Route> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Route.class));

       return (TypeAdapter<T>) new TypeAdapter<Route>() {
           @Override
           public void write(JsonWriter out, Route value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Route read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Route given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Route
   * @throws IOException if the JSON string is invalid with respect to Route
   */
  public static Route fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Route.class);
  }

  /**
   * Convert an instance of Route to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

