/*
 * GTFS Transit API
 * A sample REST API for accessing public transit data from a GTFS feed. This API allows users to query for agencies, routes, stops, and schedule information.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@transit-example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A consolidated object representing a scheduled departure from a stop.
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-30T12:08:48.652081200+02:00[Europe/Skopje]", comments = "Generator version: 7.14.0")
public class StopDeparture {
  public static final String SERIALIZED_NAME_DEPARTURE_TIME = "departure_time";
  @SerializedName(SERIALIZED_NAME_DEPARTURE_TIME)
  @jakarta.annotation.Nullable
  private String departureTime;

  public static final String SERIALIZED_NAME_ROUTE_SHORT_NAME = "route_short_name";
  @SerializedName(SERIALIZED_NAME_ROUTE_SHORT_NAME)
  @jakarta.annotation.Nullable
  private String routeShortName;

  public static final String SERIALIZED_NAME_TRIP_HEADSIGN = "trip_headsign";
  @SerializedName(SERIALIZED_NAME_TRIP_HEADSIGN)
  @jakarta.annotation.Nullable
  private String tripHeadsign;

  public static final String SERIALIZED_NAME_ROUTE_ID = "route_id";
  @SerializedName(SERIALIZED_NAME_ROUTE_ID)
  @jakarta.annotation.Nullable
  private String routeId;

  public static final String SERIALIZED_NAME_TRIP_ID = "trip_id";
  @SerializedName(SERIALIZED_NAME_TRIP_ID)
  @jakarta.annotation.Nullable
  private String tripId;

  public StopDeparture() {
  }

  public StopDeparture departureTime(@jakarta.annotation.Nullable String departureTime) {
    this.departureTime = departureTime;
    return this;
  }

  /**
   * The scheduled departure time (HH:MM:SS).
   * @return departureTime
   */
  @jakarta.annotation.Nullable
  public String getDepartureTime() {
    return departureTime;
  }

  public void setDepartureTime(@jakarta.annotation.Nullable String departureTime) {
    this.departureTime = departureTime;
  }


  public StopDeparture routeShortName(@jakarta.annotation.Nullable String routeShortName) {
    this.routeShortName = routeShortName;
    return this;
  }

  /**
   * The short name of the route for this trip.
   * @return routeShortName
   */
  @jakarta.annotation.Nullable
  public String getRouteShortName() {
    return routeShortName;
  }

  public void setRouteShortName(@jakarta.annotation.Nullable String routeShortName) {
    this.routeShortName = routeShortName;
  }


  public StopDeparture tripHeadsign(@jakarta.annotation.Nullable String tripHeadsign) {
    this.tripHeadsign = tripHeadsign;
    return this;
  }

  /**
   * The headsign or destination of the trip.
   * @return tripHeadsign
   */
  @jakarta.annotation.Nullable
  public String getTripHeadsign() {
    return tripHeadsign;
  }

  public void setTripHeadsign(@jakarta.annotation.Nullable String tripHeadsign) {
    this.tripHeadsign = tripHeadsign;
  }


  public StopDeparture routeId(@jakarta.annotation.Nullable String routeId) {
    this.routeId = routeId;
    return this;
  }

  /**
   * Get routeId
   * @return routeId
   */
  @jakarta.annotation.Nullable
  public String getRouteId() {
    return routeId;
  }

  public void setRouteId(@jakarta.annotation.Nullable String routeId) {
    this.routeId = routeId;
  }


  public StopDeparture tripId(@jakarta.annotation.Nullable String tripId) {
    this.tripId = tripId;
    return this;
  }

  /**
   * Get tripId
   * @return tripId
   */
  @jakarta.annotation.Nullable
  public String getTripId() {
    return tripId;
  }

  public void setTripId(@jakarta.annotation.Nullable String tripId) {
    this.tripId = tripId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StopDeparture stopDeparture = (StopDeparture) o;
    return Objects.equals(this.departureTime, stopDeparture.departureTime) &&
        Objects.equals(this.routeShortName, stopDeparture.routeShortName) &&
        Objects.equals(this.tripHeadsign, stopDeparture.tripHeadsign) &&
        Objects.equals(this.routeId, stopDeparture.routeId) &&
        Objects.equals(this.tripId, stopDeparture.tripId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(departureTime, routeShortName, tripHeadsign, routeId, tripId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StopDeparture {\n");
    sb.append("    departureTime: ").append(toIndentedString(departureTime)).append("\n");
    sb.append("    routeShortName: ").append(toIndentedString(routeShortName)).append("\n");
    sb.append("    tripHeadsign: ").append(toIndentedString(tripHeadsign)).append("\n");
    sb.append("    routeId: ").append(toIndentedString(routeId)).append("\n");
    sb.append("    tripId: ").append(toIndentedString(tripId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("departure_time", "route_short_name", "trip_headsign", "route_id", "trip_id"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StopDeparture
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StopDeparture.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StopDeparture is not found in the empty JSON string", StopDeparture.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StopDeparture.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StopDeparture` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("departure_time") != null && !jsonObj.get("departure_time").isJsonNull()) && !jsonObj.get("departure_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `departure_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("departure_time").toString()));
      }
      if ((jsonObj.get("route_short_name") != null && !jsonObj.get("route_short_name").isJsonNull()) && !jsonObj.get("route_short_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `route_short_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("route_short_name").toString()));
      }
      if ((jsonObj.get("trip_headsign") != null && !jsonObj.get("trip_headsign").isJsonNull()) && !jsonObj.get("trip_headsign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trip_headsign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trip_headsign").toString()));
      }
      if ((jsonObj.get("route_id") != null && !jsonObj.get("route_id").isJsonNull()) && !jsonObj.get("route_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `route_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("route_id").toString()));
      }
      if ((jsonObj.get("trip_id") != null && !jsonObj.get("trip_id").isJsonNull()) && !jsonObj.get("trip_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trip_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trip_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StopDeparture.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StopDeparture' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StopDeparture> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StopDeparture.class));

       return (TypeAdapter<T>) new TypeAdapter<StopDeparture>() {
           @Override
           public void write(JsonWriter out, StopDeparture value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StopDeparture read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StopDeparture given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StopDeparture
   * @throws IOException if the JSON string is invalid with respect to StopDeparture
   */
  public static StopDeparture fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StopDeparture.class);
  }

  /**
   * Convert an instance of StopDeparture to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

